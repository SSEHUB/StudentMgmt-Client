/**
 * Sparkyservice API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AuthenticationInfoDto } from '../model/authenticationInfoDto';
import { CredentialsDto } from '../model/credentialsDto';
import { ErrorDto } from '../model/errorDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AuthControllerService {

    protected basePath = 'http://147.172.178.30:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Authentication / Login
     * Authenticates the user and sets a JWT into the authorization header
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public authenticate(body: CredentialsDto, observe?: 'body', reportProgress?: boolean): Observable<AuthenticationInfoDto>;
    public authenticate(body: CredentialsDto, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthenticationInfoDto>>;
    public authenticate(body: CredentialsDto, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthenticationInfoDto>>;
    public authenticate(body: CredentialsDto, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling authenticate.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<AuthenticationInfoDto>('post',`${this.basePath}/api/v1/authenticate`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Checks the authentication state of the users authorization header and returns all  user informations which belongs to the user
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public checkTokenAuthenticationStatus(observe?: 'body', reportProgress?: boolean): Observable<AuthenticationInfoDto>;
    public checkTokenAuthenticationStatus(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthenticationInfoDto>>;
    public checkTokenAuthenticationStatus(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthenticationInfoDto>>;
    public checkTokenAuthenticationStatus(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // authentication (bearer-key) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*',
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AuthenticationInfoDto>('get',`${this.basePath}/api/v1/authenticate/check`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * 
     * Prints the validity status of a given token
     * @param jwtToken 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public verifyTokenValidity(jwtToken: string, observe?: 'body', reportProgress?: boolean): Observable<AuthenticationInfoDto>;
    public verifyTokenValidity(jwtToken: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AuthenticationInfoDto>>;
    public verifyTokenValidity(jwtToken: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AuthenticationInfoDto>>;
    public verifyTokenValidity(jwtToken: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (jwtToken === null || jwtToken === undefined) {
            throw new Error('Required parameter jwtToken was null or undefined when calling verifyTokenValidity.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (jwtToken !== undefined && jwtToken !== null) {
            queryParameters = queryParameters.set('jwtToken', <any>jwtToken);
        }

        let headers = this.defaultHeaders;

        // authentication (bearer-key) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AuthenticationInfoDto>('get',`${this.basePath}/api/v1/authenticate/verify`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
