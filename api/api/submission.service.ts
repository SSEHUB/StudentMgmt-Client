/**
 * Student-Management-System-API
 * The Student-Management-System-API. <a href='http://localhost:3000/api-json'>JSON</a>
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { SubmissionCreateDto } from '../model/submissionCreateDto';
import { SubmissionDto } from '../model/submissionDto';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class SubmissionService {

    protected basePath = '/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add submission
     * Adds a submission for the specified assignment.
     * @param body 
     * @param courseId 
     * @param assignmentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public add(body: SubmissionCreateDto, courseId: string, assignmentId: string, observe?: 'body', reportProgress?: boolean): Observable<SubmissionDto>;
    public add(body: SubmissionCreateDto, courseId: string, assignmentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SubmissionDto>>;
    public add(body: SubmissionCreateDto, courseId: string, assignmentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SubmissionDto>>;
    public add(body: SubmissionCreateDto, courseId: string, assignmentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling add.');
        }

        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling add.');
        }

        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling add.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<SubmissionDto>('post',`${this.basePath}/courses/${encodeURIComponent(String(courseId))}/submissions/assignments/${encodeURIComponent(String(assignmentId))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all submissions.
     * Retrieves all submissions that match the given filter.
     * @param courseId 
     * @param skip [Pagination] The amount of elements that should be skipped.
     * @param take [Pagination] The amount of elements that should be included in the response.
     * @param userId Filters by userId.
     * @param assignmentId Filters by assignmentId.
     * @param groupId Filters by groupId.
     * @param displayName Filters by user&#x27;s displayName. Matched with ILIKE %displayName%.
     * @param groupName Filters by group name. Matched with ILIKE %groupName%.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllSubmissions(courseId: string, skip?: number, take?: number, userId?: string, assignmentId?: string, groupId?: string, displayName?: string, groupName?: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SubmissionDto>>;
    public getAllSubmissions(courseId: string, skip?: number, take?: number, userId?: string, assignmentId?: string, groupId?: string, displayName?: string, groupName?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SubmissionDto>>>;
    public getAllSubmissions(courseId: string, skip?: number, take?: number, userId?: string, assignmentId?: string, groupId?: string, displayName?: string, groupName?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SubmissionDto>>>;
    public getAllSubmissions(courseId: string, skip?: number, take?: number, userId?: string, assignmentId?: string, groupId?: string, displayName?: string, groupName?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling getAllSubmissions.');
        }








        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (skip !== undefined && skip !== null) {
            queryParameters = queryParameters.set('skip', <any>skip);
        }
        if (take !== undefined && take !== null) {
            queryParameters = queryParameters.set('take', <any>take);
        }
        if (userId !== undefined && userId !== null) {
            queryParameters = queryParameters.set('userId', <any>userId);
        }
        if (assignmentId !== undefined && assignmentId !== null) {
            queryParameters = queryParameters.set('assignmentId', <any>assignmentId);
        }
        if (groupId !== undefined && groupId !== null) {
            queryParameters = queryParameters.set('groupId', <any>groupId);
        }
        if (displayName !== undefined && displayName !== null) {
            queryParameters = queryParameters.set('displayName', <any>displayName);
        }
        if (groupName !== undefined && groupName !== null) {
            queryParameters = queryParameters.set('groupName', <any>groupName);
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<SubmissionDto>>('get',`${this.basePath}/courses/${encodeURIComponent(String(courseId))}/submissions`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all submissions of assignment of group.
     * Retrieves all submissions of a group for a specific assignment.
     * @param courseId 
     * @param groupId 
     * @param assignmentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllSubmissionsOfAssignmentOfGroup(courseId: string, groupId: string, assignmentId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SubmissionDto>>;
    public getAllSubmissionsOfAssignmentOfGroup(courseId: string, groupId: string, assignmentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SubmissionDto>>>;
    public getAllSubmissionsOfAssignmentOfGroup(courseId: string, groupId: string, assignmentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SubmissionDto>>>;
    public getAllSubmissionsOfAssignmentOfGroup(courseId: string, groupId: string, assignmentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling getAllSubmissionsOfAssignmentOfGroup.');
        }

        if (groupId === null || groupId === undefined) {
            throw new Error('Required parameter groupId was null or undefined when calling getAllSubmissionsOfAssignmentOfGroup.');
        }

        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling getAllSubmissionsOfAssignmentOfGroup.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<SubmissionDto>>('get',`${this.basePath}/courses/${encodeURIComponent(String(courseId))}/submissions/groups/${encodeURIComponent(String(groupId))}/assignments/${encodeURIComponent(String(assignmentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get all submissions of user.
     * Retrieves all submissions for an assignment that were submitted by this user (does not include submissions of group members).
     * @param courseId 
     * @param userId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAllSubmissionsOfUser(courseId: string, userId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<SubmissionDto>>;
    public getAllSubmissionsOfUser(courseId: string, userId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<SubmissionDto>>>;
    public getAllSubmissionsOfUser(courseId: string, userId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<SubmissionDto>>>;
    public getAllSubmissionsOfUser(courseId: string, userId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling getAllSubmissionsOfUser.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getAllSubmissionsOfUser.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<SubmissionDto>>('get',`${this.basePath}/courses/${encodeURIComponent(String(courseId))}/submissions/users/${encodeURIComponent(String(userId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get latest submission of assignment.
     * Retrieves the latest submission of a user or their group for a specific assignment.
     * @param courseId 
     * @param userId 
     * @param assignmentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getLatestSubmissionOfAssignment(courseId: string, userId: string, assignmentId: string, observe?: 'body', reportProgress?: boolean): Observable<SubmissionDto>;
    public getLatestSubmissionOfAssignment(courseId: string, userId: string, assignmentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<SubmissionDto>>;
    public getLatestSubmissionOfAssignment(courseId: string, userId: string, assignmentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<SubmissionDto>>;
    public getLatestSubmissionOfAssignment(courseId: string, userId: string, assignmentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling getLatestSubmissionOfAssignment.');
        }

        if (userId === null || userId === undefined) {
            throw new Error('Required parameter userId was null or undefined when calling getLatestSubmissionOfAssignment.');
        }

        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling getLatestSubmissionOfAssignment.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<SubmissionDto>('get',`${this.basePath}/courses/${encodeURIComponent(String(courseId))}/submissions/users/${encodeURIComponent(String(userId))}/assignments/${encodeURIComponent(String(assignmentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Remove all submissions of assignment
     * Removes all submissions of an assignment.
     * @param courseId 
     * @param assignmentId 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeAllSubmissionsOfAssignment(courseId: string, assignmentId: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public removeAllSubmissionsOfAssignment(courseId: string, assignmentId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public removeAllSubmissionsOfAssignment(courseId: string, assignmentId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public removeAllSubmissionsOfAssignment(courseId: string, assignmentId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (courseId === null || courseId === undefined) {
            throw new Error('Required parameter courseId was null or undefined when calling removeAllSubmissionsOfAssignment.');
        }

        if (assignmentId === null || assignmentId === undefined) {
            throw new Error('Required parameter assignmentId was null or undefined when calling removeAllSubmissionsOfAssignment.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearer) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('delete',`${this.basePath}/courses/${encodeURIComponent(String(courseId))}/submissions/assignments/${encodeURIComponent(String(assignmentId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
